

<AuthorizeView>
    <Authorized>
        @context.User.Identity?.Name
        <section class="account-profile">
            <div class="profile">
                <div class="profile-image">
                    <img src=" /Images/Images/uploads/profiles/@user.ProfileImage" alt=" @user.LastName "/>

                    <EditForm enctype="multipart/form-data" method="post" Model="" FormName="ProfileUpload" OnInvalidSubmit="HandleProfileUpload">
                        <InputFile id="fileUploader"  hidden />
                        <label for="fileUploader" class="btn btn-circle btn-circle-sm"><i class="fa-regular fa-refresh"></i> </label>

                    </EditForm>
                </div>
                <div class="profile-info">
                    <h3 class="displayname">  @user.FirstName @user.LastName </h3>
                    <p> @user.Email </p>
                </div>

            </div>
        </section>
    </Authorized>
</AuthorizeView>

@code {
    private ApplicationUser user = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        user = await UserManager.GetUserAsync(HttpContext.User) ?? null!;

    }

    public async async HandleProfileUpload()
    {
        var result = await Http.PostAsync(Environment.GetEnvironmentVariable("FILEPROVIDER_UPLOADURI")), new MultipartFormDataContent
        {
           { new StreamContent((await(await JSRuntime.InvokeAsync<IJSObjectReference>("FileUpload", "fileUploader"))
           .InvokeAsync<IJSObjectReference>("files"))[0].AsStream()), "file", "profile.jpg" }
    }); ")
    }
}